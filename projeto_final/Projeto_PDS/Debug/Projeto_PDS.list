
Projeto_PDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a10  08004a10  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a18  08004a18  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000e48  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ecc  20000ecc  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f35b  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002444  00000000  00000000  0002f452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea8  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b6b  00000000  00000000  00032740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ca3  00000000  00000000  000332ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000112fa  00000000  00000000  00055f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d92a4  00000000  00000000  00067248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d90  00000000  00000000  001404ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014427c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049d8 	.word	0x080049d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080049d8 	.word	0x080049d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f001 fb2d 	bl	8001b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f839 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9d3 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d6:	f000 f99b 	bl	8000810 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004da:	f000 f96f 	bl	80007bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004de:	f000 f921 	bl	8000724 <MX_TIM2_Init>
  MX_DAC_Init();
 80004e2:	f000 f8eb 	bl	80006bc <MX_DAC_Init>
  MX_ADC1_Init();
 80004e6:	f000 f897 	bl	8000618 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Inicializando o filtro FIR com os coeficientes gerados no MATLAB */
  arm_fir_init_f32(&S, NUM_TAPS, firCoeffs32, firStateF32, BLOCK_SIZE);
 80004ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x60>)
 80004f2:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <main+0x64>)
 80004f4:	211e      	movs	r1, #30
 80004f6:	480d      	ldr	r0, [pc, #52]	; (800052c <main+0x68>)
 80004f8:	f001 faf6 	bl	8001ae8 <arm_fir_init_f32>

  /* Inicializando o Timer e DMA para ADC e DAC */
  HAL_TIM_Base_Start(&htim2);
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <main+0x6c>)
 80004fe:	f003 fc97 	bl	8003e30 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inputBuffer, BLOCK_SIZE);
 8000502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000506:	490b      	ldr	r1, [pc, #44]	; (8000534 <main+0x70>)
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x74>)
 800050a:	f001 fbc3 	bl	8001c94 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)outputBuffer, BLOCK_SIZE, DAC_ALIGN_12B_R);
 800050e:	2300      	movs	r3, #0
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <main+0x78>)
 8000518:	2100      	movs	r1, #0
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <main+0x7c>)
 800051c:	f002 f8b2 	bl	8002684 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x5c>
 8000522:	bf00      	nop
 8000524:	20000248 	.word	0x20000248
 8000528:	20000000 	.word	0x20000000
 800052c:	20000ebc 	.word	0x20000ebc
 8000530:	200001bc 	.word	0x200001bc
 8000534:	200006bc 	.word	0x200006bc
 8000538:	200000a0 	.word	0x200000a0
 800053c:	20000abc 	.word	0x20000abc
 8000540:	20000148 	.word	0x20000148

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fa14 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005b8:	233c      	movs	r3, #60	; 0x3c
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 ff89 	bl	80034e0 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f9c6 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9ea 	bl	80039d0 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f9af 	bl	8000964 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xa0>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000630:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800065a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000668:	2201      	movs	r2, #1
 800066a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800066e:	2201      	movs	r2, #1
 8000670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC1_Init+0x9c>)
 8000676:	2201      	movs	r2, #1
 8000678:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800067c:	f001 fac6 	bl	8001c0c <HAL_ADC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000686:	f000 f96d 	bl	8000964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800068a:	2307      	movs	r3, #7
 800068c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_ADC1_Init+0x9c>)
 800069c:	f001 fc1e 	bl	8001edc <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006a6:	f000 f95d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000a0 	.word	0x200000a0
 80006b8:	40012000 	.word	0x40012000

080006bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_DAC_Init+0x60>)
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <MX_DAC_Init+0x64>)
 80006ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_DAC_Init+0x60>)
 80006d2:	f001 ffb4 	bl	800263e <HAL_DAC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006dc:	f000 f942 	bl	8000964 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006e0:	2324      	movs	r3, #36	; 0x24
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_DAC_Init+0x60>)
 80006f0:	f002 f8d9 	bl	80028a6 <HAL_DAC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006fa:	f000 f933 	bl	8000964 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_15) != HAL_OK)
 80006fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000702:	2100      	movs	r1, #0
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_DAC_Init+0x60>)
 8000706:	f002 f953 	bl	80029b0 <HAL_DACEx_TriangleWaveGenerate>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f928 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000148 	.word	0x20000148
 8000720:	40007400 	.word	0x40007400

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_TIM2_Init+0x94>)
 800074a:	2263      	movs	r2, #99	; 0x63
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 299;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000756:	f240 122b 	movw	r2, #299	; 0x12b
 800075a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_TIM2_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <MX_TIM2_Init+0x94>)
 800076a:	f003 fb11 	bl	8003d90 <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000774:	f000 f8f6 	bl	8000964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <MX_TIM2_Init+0x94>)
 8000786:	f003 fbbb 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f8e8 	bl	8000964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000794:	2320      	movs	r3, #32
 8000796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_TIM2_Init+0x94>)
 80007a2:	f003 fdaf 	bl	8004304 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f8da 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200001bc 	.word	0x200001bc

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f003 fe02 	bl	80043fc <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8b1 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000204 	.word	0x20000204
 800080c:	40011000 	.word	0x40011000

08000810 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_DMA_Init+0x68>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_DMA_Init+0x68>)
 8000820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_DMA_Init+0x68>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_DMA_Init+0x68>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_DMA_Init+0x68>)
 800083c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_DMA_Init+0x68>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2010      	movs	r0, #16
 8000854:	f001 febd 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000858:	2010      	movs	r0, #16
 800085a:	f001 fed6 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2038      	movs	r0, #56	; 0x38
 8000864:	f001 feb5 	bl	80025d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000868:	2038      	movs	r0, #56	; 0x38
 800086a:	f001 fece 	bl	800260a <HAL_NVIC_EnableIRQ>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_GPIO_Init+0x4c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MX_GPIO_Init+0x4c>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_GPIO_Init+0x4c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x4c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_GPIO_Init+0x4c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

/* Callback chamado quando o DMA do ADC termina a conversão */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <HAL_ADC_ConvCpltCallback+0x64>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d123      	bne.n	8000926 <HAL_ADC_ConvCpltCallback+0x5a>
        /* Processando as amostras do bloco atual (aplica o filtro FIR) */
        process_signal();
 80008de:	f000 f82f 	bl	8000940 <process_signal>

        /* Enviando o sinal filtrado para o DAC */
        for (int i = 0; i < BLOCK_SIZE; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e01b      	b.n	8000920 <HAL_ADC_ConvCpltCallback+0x54>
            /* O valor filtrado já está no outputBuffer[i], e precisa ser ajustado para o DAC de 12 bits*/
            uint32_t dac_output = (uint32_t)((outputBuffer[i] + 1.0f) * (DAC_MAX_VALUE / 2));  // Ajustando o sinal para o range do DAC (0 a 4095)
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <HAL_ADC_ConvCpltCallback+0x68>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000938 <HAL_ADC_ConvCpltCallback+0x6c>
 8000900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000908:	ee17 3a90 	vmov	r3, s15
 800090c:	60bb      	str	r3, [r7, #8]

            /* Enviando para o DAC (ajustando para 12 bits) */
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_output);
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_ADC_ConvCpltCallback+0x70>)
 8000916:	f001 ff83 	bl	8002820 <HAL_DAC_SetValue>
        for (int i = 0; i < BLOCK_SIZE; i++) {
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2bff      	cmp	r3, #255	; 0xff
 8000924:	dde0      	ble.n	80008e8 <HAL_ADC_ConvCpltCallback+0x1c>
        }
    }
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40012000 	.word	0x40012000
 8000934:	20000abc 	.word	0x20000abc
 8000938:	45000000 	.word	0x45000000
 800093c:	20000148 	.word	0x20000148

08000940 <process_signal>:

/* Função de processamento do sinal */
void process_signal(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    /* Aplicando o filtro FIR ao bloco de amostras de entrada e gerar o bloco de saída */
    arm_fir_f32(&S, inputBuffer, outputBuffer, BLOCK_SIZE);
 8000944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <process_signal+0x18>)
 800094a:	4904      	ldr	r1, [pc, #16]	; (800095c <process_signal+0x1c>)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <process_signal+0x20>)
 800094e:	f000 fa08 	bl	8000d62 <arm_fir_f32>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000abc 	.word	0x20000abc
 800095c:	200006bc 	.word	0x200006bc
 8000960:	20000ebc 	.word	0x20000ebc

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <HAL_ADC_MspInit+0xdc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d157      	bne.n	8000a92 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <HAL_ADC_MspInit+0xe0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <HAL_ADC_MspInit+0xe4>)
 8000a2e:	f002 fbbb 	bl	80031a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_ADC_MspInit+0xec>)
 8000a36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a78:	f002 f826 	bl	8002ac8 <HAL_DMA_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000a82:	f7ff ff6f 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_ADC_MspInit+0xe8>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200000e8 	.word	0x200000e8
 8000aac:	40026410 	.word	0x40026410

08000ab0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <HAL_DAC_MspInit+0xdc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d158      	bne.n	8000b84 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_DAC_MspInit+0xe0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <HAL_DAC_MspInit+0xe4>)
 8000b1e:	f002 fb43 	bl	80031a8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_DAC_MspInit+0xec>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b2a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b5a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b6a:	f001 ffad 	bl	8002ac8 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000b74:	f7ff fef6 	bl	8000964 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_DAC_MspInit+0xe8>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40007400 	.word	0x40007400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	2000015c 	.word	0x2000015c
 8000b9c:	40026088 	.word	0x40026088

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb0:	d10d      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_TIM_Base_MspInit+0x3c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_TIM_Base_MspInit+0x3c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_TIM_Base_MspInit+0x3c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0x8c>)
 8000c58:	f002 faa6 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 ff86 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <DMA1_Stream5_IRQHandler+0x10>)
 8000cca:	f002 f803 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000015c 	.word	0x2000015c

08000cd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <DMA2_Stream0_IRQHandler+0x10>)
 8000cde:	f001 fff9 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000e8 	.word	0x200000e8

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ffd7 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 fe27 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fbbf 	bl	80004c4 <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000d54:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 8000d58:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d5c:	20000ecc 	.word	0x20000ecc

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>

08000d62 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b0a7      	sub	sp, #156	; 0x9c
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]
    */
   blkCnt = blockSize >> 3;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.
   ** a second loop below computes the remaining 1 to 7 samples. */
   while (blkCnt > 0U)
 8000d9e:	f000 bdf8 	b.w	8001992 <arm_fir_f32+0xc30>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	1d13      	adds	r3, r2, #4
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dac:	1d19      	adds	r1, r3, #4
 8000dae:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	1d13      	adds	r3, r2, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dc0:	1d19      	adds	r1, r3, #4
 8000dc2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	1d13      	adds	r3, r2, #4
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dd4:	1d19      	adds	r1, r3, #4
 8000dd6:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	1d13      	adds	r3, r2, #4
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000de8:	1d19      	adds	r1, r3, #4
 8000dea:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      acc1 = 0.0f;
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      acc2 = 0.0f;
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	67fb      	str	r3, [r7, #124]	; 0x7c
      acc3 = 0.0f;
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	67bb      	str	r3, [r7, #120]	; 0x78
      acc4 = 0.0f;
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	677b      	str	r3, [r7, #116]	; 0x74
      acc5 = 0.0f;
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	673b      	str	r3, [r7, #112]	; 0x70
      acc6 = 0.0f;
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
      acc7 = 0.0f;
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	66bb      	str	r3, [r7, #104]	; 0x68

      /* Initialize state pointer */
      px = pState;
 8000e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /* Initialize coeff pointer */
      pb = (pCoeffs);
 8000e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      /* This is separated from the others to avoid
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	1d13      	adds	r3, r2, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e3e:	1d19      	adds	r1, r3, #4
 8000e40:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	1d13      	adds	r3, r2, #4
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e52:	1d19      	adds	r1, r3, #4
 8000e54:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	1d13      	adds	r3, r2, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e66:	1d19      	adds	r1, r3, #4
 8000e68:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	1d13      	adds	r3, r2, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e7a:	1d19      	adds	r1, r3, #4
 8000e7c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 8000e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	667b      	str	r3, [r7, #100]	; 0x64
      x1 = *px++;
 8000e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e96:	1d1a      	adds	r2, r3, #4
 8000e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	663b      	str	r3, [r7, #96]	; 0x60
      x2 = *px++;
 8000ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	65fb      	str	r3, [r7, #92]	; 0x5c
      x3 = *px++;
 8000eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	65bb      	str	r3, [r7, #88]	; 0x58
      x4 = *px++;
 8000ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ec0:	1d1a      	adds	r2, r3, #4
 8000ec2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
      x5 = *px++;
 8000eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ece:	1d1a      	adds	r2, r3, #4
 8000ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	653b      	str	r3, [r7, #80]	; 0x50
      x6 = *px++;
 8000ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000edc:	1d1a      	adds	r2, r3, #4
 8000ede:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3U;
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over the number of taps.  Unroll by a factor of 8.
       ** Repeat until we've computed numTaps-8 coefficients. */
      while (tapCnt > 0U)
 8000eec:	f000 bc73 	b.w	80017d6 <arm_fir_f32+0xa74>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ef4:	1d1a      	adds	r2, r3, #4
 8000ef6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f02:	1d1a      	adds	r2, r3, #4
 8000f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 8000f0c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f18:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 8000f1c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000f20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f28:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 8000f2c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 8000f3c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	edc7 7a08 	vstr	s15, [r7, #32]

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 8000f4c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f58:	edc7 7a07 	vstr	s15, [r7, #28]

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 8000f5c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000f60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f68:	edc7 7a06 	vstr	s15, [r7, #24]

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 8000f6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000f70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f78:	edc7 7a05 	vstr	s15, [r7, #20]

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 8000f7c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000f80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 8000f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f90:	1d1a      	adds	r2, r3, #4
 8000f92:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 8000f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f9e:	1d1a      	adds	r2, r3, #4
 8000fa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	667b      	str	r3, [r7, #100]	; 0x64

         acc0 += p0;
 8000fa8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8000fac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 8000fb8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000fbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8000fc8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8000fcc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8000fd8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8000fdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8000fe8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 8000ff8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8000ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001008:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800100c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001014:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 8001018:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800101c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 8001028:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800102c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x2 * c0;
 8001038:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800103c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x3 * c0;
 8001048:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800104c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x4 * c0;
 8001058:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800105c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x5 * c0;
 8001068:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800106c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x6 * c0;
 8001078:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800107c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001084:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x7 * c0;
 8001088:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800108c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x0 * c0;
 8001098:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800109c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a4:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80010a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010ac:	1d1a      	adds	r2, r3, #4
 80010ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80010b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	663b      	str	r3, [r7, #96]	; 0x60

         acc0 += p0;
 80010c4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80010c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 80010d4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80010d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 80010e4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80010e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 80010f4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80010f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001104:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001108:	edd7 7a07 	vldr	s15, [r7, #28]
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 8001114:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001118:	edd7 7a06 	vldr	s15, [r7, #24]
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001124:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001128:	edd7 7a05 	vldr	s15, [r7, #20]
 800112c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001130:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 8001134:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001138:	edd7 7a04 	vldr	s15, [r7, #16]
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x2 * c0;
 8001144:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001148:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x3 * c0;
 8001154:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001158:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x4 * c0;
 8001164:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001168:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x5 * c0;
 8001174:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001178:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800117c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001180:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x6 * c0;
 8001184:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001188:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x7 * c0;
 8001194:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001198:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x0 * c0;
 80011a4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80011a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x1 * c0;
 80011b4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80011b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80011c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011c8:	1d1a      	adds	r2, r3, #4
 80011ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 80011d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011d6:	1d1a      	adds	r2, r3, #4
 80011d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c

         acc0 += p0;
 80011e0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80011e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 80011f0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80011f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8001200:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001204:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8001210:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001214:	edd7 7a08 	vldr	s15, [r7, #32]
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001220:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001224:	edd7 7a07 	vldr	s15, [r7, #28]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 8001230:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001234:	edd7 7a06 	vldr	s15, [r7, #24]
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001240:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001244:	edd7 7a05 	vldr	s15, [r7, #20]
 8001248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 8001250:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001254:	edd7 7a04 	vldr	s15, [r7, #16]
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x3 * c0;
 8001260:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001264:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x4 * c0;
 8001270:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001274:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x5 * c0;
 8001280:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001284:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x6 * c0;
 8001290:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001294:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x7 * c0;
 80012a0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80012a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x0 * c0;
 80012b0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80012b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x1 * c0;
 80012c0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80012c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x2 * c0;
 80012d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012dc:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80012e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012e4:	1d1a      	adds	r2, r3, #4
 80012e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 80012ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	65bb      	str	r3, [r7, #88]	; 0x58

         acc0 += p0;
 80012fc:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001300:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 800130c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001310:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 800131c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001320:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 800132c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001330:	edd7 7a08 	vldr	s15, [r7, #32]
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 800133c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001340:	edd7 7a07 	vldr	s15, [r7, #28]
 8001344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001348:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 800134c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001350:	edd7 7a06 	vldr	s15, [r7, #24]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 800135c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001360:	edd7 7a05 	vldr	s15, [r7, #20]
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 800136c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001370:	edd7 7a04 	vldr	s15, [r7, #16]
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x4 * c0;
 800137c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001380:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001388:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x5 * c0;
 800138c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001390:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x6 * c0;
 800139c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80013a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x7 * c0;
 80013ac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x0 * c0;
 80013bc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80013c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c8:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x1 * c0;
 80013cc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80013d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x2 * c0;
 80013dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x3 * c0;
 80013ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80013fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001400:	1d1a      	adds	r2, r3, #4
 8001402:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 800140a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800140e:	1d1a      	adds	r2, r3, #4
 8001410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	657b      	str	r3, [r7, #84]	; 0x54

         acc0 += p0;
 8001418:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800141c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 8001428:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800142c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001434:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8001438:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800143c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8001448:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800144c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001458:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800145c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 8001468:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001478:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800147c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 8001488:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x5 * c0;
 8001498:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800149c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x6 * c0;
 80014a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80014ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x7 * c0;
 80014b8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80014bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x0 * c0;
 80014c8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80014cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x1 * c0;
 80014d8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80014dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x2 * c0;
 80014e8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80014ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x3 * c0;
 80014f8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80014fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x4 * c0;
 8001508:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800150c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8001526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	653b      	str	r3, [r7, #80]	; 0x50

         acc0 += p0;
 8001534:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001538:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 8001544:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001548:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8001554:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001558:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8001564:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001568:	edd7 7a08 	vldr	s15, [r7, #32]
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001574:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001578:	edd7 7a07 	vldr	s15, [r7, #28]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 8001584:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001588:	edd7 7a06 	vldr	s15, [r7, #24]
 800158c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001590:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001594:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001598:	edd7 7a05 	vldr	s15, [r7, #20]
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 80015a4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80015a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x6 * c0;
 80015b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x7 * c0;
 80015c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80015c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x0 * c0;
 80015d4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80015d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x1 * c0;
 80015e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80015e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x2 * c0;
 80015f4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80015f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x3 * c0;
 8001604:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001608:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x4 * c0;
 8001614:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001618:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x5 * c0;
 8001624:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001628:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	637b      	str	r3, [r7, #52]	; 0x34

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c

         acc0 += p0;
 8001650:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001654:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 8001660:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001664:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8001670:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001674:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8001680:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001684:	edd7 7a08 	vldr	s15, [r7, #32]
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001690:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001694:	edd7 7a07 	vldr	s15, [r7, #28]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 80016a0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80016a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ac:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 80016b0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80016b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016bc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 80016c0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80016c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Perform the multiply-accumulates */
         p0 = x7 * c0;
 80016d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x0 * c0;
 80016e0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80016e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x1 * c0;
 80016f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80016f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x2 * c0;
 8001700:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001704:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x3 * c0;
 8001710:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001714:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x4 * c0;
 8001720:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001724:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x5 * c0;
 8001730:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001734:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x6 * c0;
 8001740:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001744:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	edc7 7a04 	vstr	s15, [r7, #16]

         tapCnt--;
 8001750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001752:	3b01      	subs	r3, #1
 8001754:	647b      	str	r3, [r7, #68]	; 0x44

         acc0 += p0;
 8001756:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800175a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 8001766:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800176a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 8001776:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800177a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 8001786:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800178a:	edd7 7a08 	vldr	s15, [r7, #32]
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001792:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 8001796:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800179a:	edd7 7a07 	vldr	s15, [r7, #28]
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 80017a6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80017aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 80017b6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80017ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 80017c6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80017ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
      while (tapCnt > 0U)
 80017d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ab89 	bne.w	8000ef0 <arm_fir_f32+0x18e>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8U;
 80017de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44

      while (tapCnt > 0U)
 80017e6:	e09e      	b.n	8001926 <arm_fir_f32+0xbc4>
      {
         /* Read coefficients */
         c0 = *(pb++);
 80017e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017ec:	1d1a      	adds	r2, r3, #4
 80017ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34

         /* Fetch 1 state variable */
         x7 = *(px++);
 80017f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017fa:	1d1a      	adds	r2, r3, #4
 80017fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */
         p0 = x0 * c0;
 8001804:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001808:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800180c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001810:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
         p1 = x1 * c0;
 8001814:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001818:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
         p2 = x2 * c0;
 8001824:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001828:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800182c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001830:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         p3 = x3 * c0;
 8001834:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001838:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	edc7 7a08 	vstr	s15, [r7, #32]
         p4 = x4 * c0;
 8001844:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001848:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	edc7 7a07 	vstr	s15, [r7, #28]
         p5 = x5 * c0;
 8001854:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001858:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800185c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001860:	edc7 7a06 	vstr	s15, [r7, #24]
         p6 = x6 * c0;
 8001864:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001868:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	edc7 7a05 	vstr	s15, [r7, #20]
         p7 = x7 * c0;
 8001874:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001878:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	edc7 7a04 	vstr	s15, [r7, #16]

         /* Reuse the present sample states for next sample */
         x0 = x1;
 8001884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
         x1 = x2;
 8001888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188a:	663b      	str	r3, [r7, #96]	; 0x60
         x2 = x3;
 800188c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188e:	65fb      	str	r3, [r7, #92]	; 0x5c
         x3 = x4;
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	65bb      	str	r3, [r7, #88]	; 0x58
         x4 = x5;
 8001894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001896:	657b      	str	r3, [r7, #84]	; 0x54
         x5 = x6;
 8001898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
         x6 = x7;
 800189c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c

         acc0 += p0;
 80018a0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80018a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         acc1 += p1;
 80018b0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80018b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         acc2 += p2;
 80018c0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80018c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
         acc3 += p3;
 80018d0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80018d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
         acc4 += p4;
 80018e0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80018e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ec:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
         acc5 += p5;
 80018f0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80018f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
         acc6 += p6;
 8001900:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001904:	edd7 7a05 	vldr	s15, [r7, #20]
 8001908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
         acc7 += p7;
 8001910:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001914:	edd7 7a04 	vldr	s15, [r7, #16]
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

         /* Decrement the loop counter */
         tapCnt--;
 8001920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001922:	3b01      	subs	r3, #1
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
      while (tapCnt > 0U)
 8001926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001928:	2b00      	cmp	r3, #0
 800192a:	f47f af5d 	bne.w	80017e8 <arm_fir_f32+0xa86>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 800192e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001932:	3320      	adds	r3, #32
 8001934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001942:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	1d1a      	adds	r2, r3, #4
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800194e:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001958:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001962:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800196c:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1d1a      	adds	r2, r3, #4
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001976:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001980:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	1d1a      	adds	r2, r3, #4
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800198a:	601a      	str	r2, [r3, #0]

      blkCnt--;
 800198c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198e:	3b01      	subs	r3, #1
 8001990:	643b      	str	r3, [r7, #64]	; 0x40
   while (blkCnt > 0U)
 8001992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f aa04 	bne.w	8000da2 <arm_fir_f32+0x40>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8U;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40

   while (blkCnt > 0U)
 80019a2:	e040      	b.n	8001a26 <arm_fir_f32+0xcc4>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	1d13      	adds	r3, r2, #4
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ae:	1d19      	adds	r1, r3, #4
 80019b0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      /* Initialize state pointer */
      px = pState;
 80019c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 80019c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      i = numTaps;
 80019ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 80019d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d6:	1d1a      	adds	r2, r3, #4
 80019d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e4:	1d1a      	adds	r2, r3, #4
 80019e6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         i--;
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a00:	3b01      	subs	r3, #1
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48

      } while (i > 0U);
 8001a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e3      	bne.n	80019d2 <arm_fir_f32+0xc70>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	1d1a      	adds	r2, r3, #4
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a14:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8001a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      blkCnt--;
 8001a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a22:	3b01      	subs	r3, #1
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
   while (blkCnt > 0U)
 8001a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1bb      	bne.n	80019a4 <arm_fir_f32+0xc42>
   /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

   tapCnt = (numTaps - 1U) >> 2U;
 8001a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a36:	3b01      	subs	r3, #1
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44

   /* copy data */
   while (tapCnt > 0U)
 8001a3c:	e032      	b.n	8001aa4 <arm_fir_f32+0xd42>
   {
      *pStateCurnt++ = *pState++;
 8001a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a42:	1d13      	adds	r3, r2, #4
 8001a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4c:	1d19      	adds	r1, r3, #4
 8001a4e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a5a:	1d13      	adds	r3, r2, #4
 8001a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a64:	1d19      	adds	r1, r3, #4
 8001a66:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a72:	1d13      	adds	r3, r2, #4
 8001a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7c:	1d19      	adds	r1, r3, #4
 8001a7e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8001a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a8a:	1d13      	adds	r3, r2, #4
 8001a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a94:	1d19      	adds	r1, r3, #4
 8001a96:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	647b      	str	r3, [r7, #68]	; 0x44
   while (tapCnt > 0U)
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1c9      	bne.n	8001a3e <arm_fir_f32+0xcdc>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1U) % 0x4U;
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	3b01      	subs	r3, #1
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44

   /* Copy the remaining q31_t data */
   while (tapCnt > 0U)
 8001ab4:	e00e      	b.n	8001ad4 <arm_fir_f32+0xd72>
   {
      *pStateCurnt++ = *pState++;
 8001ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001aba:	1d13      	adds	r3, r2, #4
 8001abc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac4:	1d19      	adds	r1, r3, #4
 8001ac6:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8001ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	647b      	str	r3, [r7, #68]	; 0x44
   while (tapCnt > 0U)
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <arm_fir_f32+0xd54>
   }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	379c      	adds	r7, #156	; 0x9c
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	460b      	mov	r3, r1
 8001af6:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	897a      	ldrh	r2, [r7, #10]
 8001afc:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8001b04:	897a      	ldrh	r2, [r7, #10]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2100      	movs	r1, #0
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f002 ff34 	bl	8004980 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	605a      	str	r2, [r3, #4]

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <HAL_Init+0x40>)
 8001b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_Init+0x40>)
 8001b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x40>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 fd33 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f000 f808 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7fe ff08 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fd4b 	bl	8002626 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba8:	f000 fd13 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000078 	.word	0x20000078
 8001bc4:	20000080 	.word	0x20000080
 8001bc8:	2000007c 	.word	0x2000007c

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000080 	.word	0x20000080
 8001bf0:	20000ec8 	.word	0x20000ec8

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000ec8 	.word	0x20000ec8

08001c0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e033      	b.n	8001c8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fec8 	bl	80009c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c52:	f023 0302 	bic.w	r3, r3, #2
 8001c56:	f043 0202 	orr.w	r2, r3, #2
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa5e 	bl	8002120 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
 8001c7a:	e001      	b.n	8001c80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x1e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0e9      	b.n	8001e86 <HAL_ADC_Start_DMA+0x1f2>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d018      	beq.n	8001cfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_ADC_Start_DMA+0x1fc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6d      	ldr	r2, [pc, #436]	; (8001e94 <HAL_ADC_Start_DMA+0x200>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9a      	lsrs	r2, r3, #18
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d08:	d107      	bne.n	8001d1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	f040 80a1 	bne.w	8001e6c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f023 0206 	bic.w	r2, r3, #6
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_ADC_Start_DMA+0x204>)
 8001d88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_ADC_Start_DMA+0x208>)
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	4a42      	ldr	r2, [pc, #264]	; (8001ea0 <HAL_ADC_Start_DMA+0x20c>)
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	4a41      	ldr	r2, [pc, #260]	; (8001ea4 <HAL_ADC_Start_DMA+0x210>)
 8001da0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001daa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	334c      	adds	r3, #76	; 0x4c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f000 ff22 	bl	8002c24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12a      	bne.n	8001e42 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2d      	ldr	r2, [pc, #180]	; (8001ea8 <HAL_ADC_Start_DMA+0x214>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d015      	beq.n	8001e22 <HAL_ADC_Start_DMA+0x18e>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2c      	ldr	r2, [pc, #176]	; (8001eac <HAL_ADC_Start_DMA+0x218>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_Start_DMA+0x178>
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_ADC_Start_DMA+0x204>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <HAL_ADC_Start_DMA+0x21c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d136      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_ADC_Start_DMA+0x204>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d130      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d129      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e020      	b.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_ADC_Start_DMA+0x214>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d11b      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d114      	bne.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	e00b      	b.n	8001e84 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0210 	orr.w	r2, r3, #16
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000078 	.word	0x20000078
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	40012300 	.word	0x40012300
 8001e9c:	08002319 	.word	0x08002319
 8001ea0:	080023d3 	.word	0x080023d3
 8001ea4:	080023ef 	.word	0x080023ef
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	40012100 	.word	0x40012100
 8001eb0:	40012200 	.word	0x40012200

08001eb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1c>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e105      	b.n	8002104 <HAL_ADC_ConfigChannel+0x228>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d925      	bls.n	8001f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b1e      	subs	r3, #30
 8001f1e:	2207      	movs	r2, #7
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4603      	mov	r3, r0
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4403      	add	r3, r0
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	e022      	b.n	8001f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	2207      	movs	r2, #7
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4403      	add	r3, r0
 8001f90:	409a      	lsls	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d824      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b05      	subs	r3, #5
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b05      	subs	r3, #5
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	e04c      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d824      	bhi.n	800203e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b23      	subs	r3, #35	; 0x23
 8002006:	221f      	movs	r2, #31
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b23      	subs	r3, #35	; 0x23
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
 800203c:	e023      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b41      	subs	r3, #65	; 0x41
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b41      	subs	r3, #65	; 0x41
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_ADC_ConfigChannel+0x234>)
 8002088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a21      	ldr	r2, [pc, #132]	; (8002114 <HAL_ADC_ConfigChannel+0x238>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b12      	cmp	r3, #18
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_ADC_ConfigChannel+0x238>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d123      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x1e6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b11      	cmp	r3, #17
 80020c0:	d11b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d111      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_ADC_ConfigChannel+0x23c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_ADC_ConfigChannel+0x240>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9a      	lsrs	r2, r3, #18
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40012300 	.word	0x40012300
 8002114:	40012000 	.word	0x40012000
 8002118:	20000078 	.word	0x20000078
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002128:	4b79      	ldr	r3, [pc, #484]	; (8002310 <ADC_Init+0x1f0>)
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	4a58      	ldr	r2, [pc, #352]	; (8002314 <ADC_Init+0x1f4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6899      	ldr	r1, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e00f      	b.n	800221e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0202 	bic.w	r2, r2, #2
 800222c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e1b      	ldrb	r3, [r3, #24]
 8002238:	005a      	lsls	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800226a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	3b01      	subs	r3, #1
 8002278:	035a      	lsls	r2, r3, #13
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	e007      	b.n	8002294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	051a      	lsls	r2, r3, #20
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022d6:	025a      	lsls	r2, r3, #9
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	029a      	lsls	r2, r3, #10
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012300 	.word	0x40012300
 8002314:	0f000001 	.word	0x0f000001

08002318 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d13c      	bne.n	80023ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d12b      	bne.n	80023a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d127      	bne.n	80023a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800236c:	2b00      	cmp	r3, #0
 800236e:	d119      	bne.n	80023a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0220 	bic.w	r2, r2, #32
 800237e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7fe fa91 	bl	80008cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023aa:	e00e      	b.n	80023ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7ff fd85 	bl	8001ec8 <HAL_ADC_ErrorCallback>
}
 80023be:	e004      	b.n	80023ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff fd67 	bl	8001eb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0204 	orr.w	r2, r3, #4
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fd5a 	bl	8001ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4907      	ldr	r1, [pc, #28]	; (80024b8 <__NVIC_EnableIRQ+0x38>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000e100 	.word	0xe000e100

080024bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0a      	blt.n	80024e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	490c      	ldr	r1, [pc, #48]	; (8002508 <__NVIC_SetPriority+0x4c>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	0112      	lsls	r2, r2, #4
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	440b      	add	r3, r1
 80024e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e4:	e00a      	b.n	80024fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4908      	ldr	r1, [pc, #32]	; (800250c <__NVIC_SetPriority+0x50>)
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	3b04      	subs	r3, #4
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	761a      	strb	r2, [r3, #24]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000e100 	.word	0xe000e100
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	; 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f1c3 0307 	rsb	r3, r3, #7
 800252a:	2b04      	cmp	r3, #4
 800252c:	bf28      	it	cs
 800252e:	2304      	movcs	r3, #4
 8002530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3304      	adds	r3, #4
 8002536:	2b06      	cmp	r3, #6
 8002538:	d902      	bls.n	8002540 <NVIC_EncodePriority+0x30>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3b03      	subs	r3, #3
 800253e:	e000      	b.n	8002542 <NVIC_EncodePriority+0x32>
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43d9      	mvns	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	4313      	orrs	r3, r2
         );
}
 800256a:	4618      	mov	r0, r3
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800259c:	f7ff ff8e 	bl	80024bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff29 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff3e 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff8e 	bl	8002510 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5d 	bl	80024bc <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff31 	bl	8002480 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e014      	b.n	800267a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fa25 	bl	8000ab0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	795b      	ldrb	r3, [r3, #5]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_DAC_Start_DMA+0x22>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e0ab      	b.n	80027fe <HAL_DAC_Start_DMA+0x17a>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2202      	movs	r2, #2
 80026b0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d12f      	bne.n	8002718 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_DAC_Start_DMA+0x184>)
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_DAC_Start_DMA+0x188>)
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_DAC_Start_DMA+0x18c>)
 80026ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d013      	beq.n	800270e <HAL_DAC_Start_DMA+0x8a>
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d845      	bhi.n	8002778 <HAL_DAC_Start_DMA+0xf4>
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_DAC_Start_DMA+0x76>
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d005      	beq.n	8002704 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80026f8:	e03e      	b.n	8002778 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3308      	adds	r3, #8
 8002700:	613b      	str	r3, [r7, #16]
        break;
 8002702:	e03c      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	613b      	str	r3, [r7, #16]
        break;
 800270c:	e037      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3310      	adds	r3, #16
 8002714:	613b      	str	r3, [r7, #16]
        break;
 8002716:	e032      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a3d      	ldr	r2, [pc, #244]	; (8002814 <HAL_DAC_Start_DMA+0x190>)
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <HAL_DAC_Start_DMA+0x194>)
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_DAC_Start_DMA+0x198>)
 800272e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800273e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d013      	beq.n	800276e <HAL_DAC_Start_DMA+0xea>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d817      	bhi.n	800277c <HAL_DAC_Start_DMA+0xf8>
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_DAC_Start_DMA+0xd6>
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d005      	beq.n	8002764 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002758:	e010      	b.n	800277c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3314      	adds	r3, #20
 8002760:	613b      	str	r3, [r7, #16]
        break;
 8002762:	e00c      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3318      	adds	r3, #24
 800276a:	613b      	str	r3, [r7, #16]
        break;
 800276c:	e007      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	331c      	adds	r3, #28
 8002774:	613b      	str	r3, [r7, #16]
        break;
 8002776:	e002      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002778:	bf00      	nop
 800277a:	e000      	b.n	800277e <HAL_DAC_Start_DMA+0xfa>
        break;
 800277c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002792:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6898      	ldr	r0, [r3, #8]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	f000 fa41 	bl	8002c24 <HAL_DMA_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]
 80027a6:	e010      	b.n	80027ca <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	68d8      	ldr	r0, [r3, #12]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	f000 fa2f 	bl	8002c24 <HAL_DMA_Start_IT>
 80027c6:	4603      	mov	r3, r0
 80027c8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6819      	ldr	r1, [r3, #0]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e005      	b.n	80027fc <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	08002945 	.word	0x08002945
 800280c:	08002967 	.word	0x08002967
 8002810:	08002983 	.word	0x08002983
 8002814:	08002a5b 	.word	0x08002a5b
 8002818:	08002a7d 	.word	0x08002a7d
 800281c:	08002a99 	.word	0x08002a99

08002820 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	3308      	adds	r3, #8
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	e004      	b.n	8002854 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	3314      	adds	r3, #20
 8002852:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	795b      	ldrb	r3, [r3, #5]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_DAC_ConfigChannel+0x18>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e03c      	b.n	8002938 <HAL_DAC_ConfigChannel+0x92>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2202      	movs	r2, #2
 80028c8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4013      	ands	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	22c0      	movs	r2, #192	; 0xc0
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43da      	mvns	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	400a      	ands	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff ff89 	bl	800286a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	711a      	strb	r2, [r3, #4]
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff ff82 	bl	800287e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff78 	bl	8002892 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	711a      	strb	r2, [r3, #4]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	795b      	ldrb	r3, [r3, #5]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_DACEx_TriangleWaveGenerate+0x18>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e024      	b.n	8002a12 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2202      	movs	r2, #2
 80029d2:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	ea02 0103 	and.w	r1, r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff ffd8 	bl	8002a1e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	711a      	strb	r2, [r3, #4]
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ffd1 	bl	8002a32 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff ffc7 	bl	8002a46 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	711a      	strb	r2, [r3, #4]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff f88e 	bl	8001bf4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e099      	b.n	8002c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e00f      	b.n	8002b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff f875 	bl	8001bf4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d908      	bls.n	8002b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e078      	b.n	8002c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e8      	bne.n	8002b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_DMA_Init+0x158>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa6f 	bl	80030b0 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa26 	bl	8003044 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	223f      	movs	r2, #63	; 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	f010803f 	.word	0xf010803f

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Start_IT+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e040      	b.n	8002ccc <HAL_DMA_Start_IT+0xa8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12f      	bne.n	8002cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f9b8 	bl	8002fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0216 	orr.w	r2, r2, #22
 8002c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <HAL_DMA_IRQHandler+0x248>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a8e      	ldr	r2, [pc, #568]	; (8002f20 <HAL_DMA_IRQHandler+0x24c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2208      	movs	r2, #8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2201      	movs	r2, #1
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2210      	movs	r2, #16
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d043      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2210      	movs	r2, #16
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d024      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e01f      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	e016      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2220      	movs	r2, #32
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 808f 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8087 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d136      	bne.n	8002eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_IRQHandler+0x1da>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	223f      	movs	r2, #63	; 0x3f
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07e      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
        }
        return;
 8002eea:	e079      	b.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01d      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e02c      	b.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
 8002f1a:	bf00      	nop
 8002f1c:	20000078 	.word	0x20000078
 8002f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d023      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
 8002f34:	e01e      	b.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10f      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0210 	bic.w	r2, r2, #16
 8002f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d032      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d307      	bcc.n	8002fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f2      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x2cc>
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fe0:	bf00      	nop
    }
  }
}
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d108      	bne.n	8003028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003026:	e007      	b.n	8003038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b10      	subs	r3, #16
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d909      	bls.n	8003086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e007      	b.n	8003096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	aaaaaaab 	.word	0xaaaaaaab
 80030ac:	08004a08 	.word	0x08004a08

080030b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d856      	bhi.n	800317e <DMA_CheckFifoParam+0xce>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x28>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	0800317f 	.word	0x0800317f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d046      	beq.n	8003182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e043      	b.n	8003182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003102:	d140      	bne.n	8003186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e03d      	b.n	8003186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d121      	bne.n	8003158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d837      	bhi.n	800318a <DMA_CheckFifoParam+0xda>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x70>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003137 	.word	0x08003137
 8003128:	08003131 	.word	0x08003131
 800312c:	08003149 	.word	0x08003149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e030      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d025      	beq.n	800318e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e022      	b.n	800318e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003156:	e01c      	b.n	8003192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d903      	bls.n	8003166 <DMA_CheckFifoParam+0xb6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003164:	e018      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e015      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e00b      	b.n	8003196 <DMA_CheckFifoParam+0xe6>
      break;
 800317e:	bf00      	nop
 8003180:	e00a      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e008      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;   
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
    }
  } 
  
  return status; 
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e16b      	b.n	800349c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 815a 	bne.w	8003496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d130      	bne.n	800325c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003230:	2201      	movs	r2, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 0201 	and.w	r2, r3, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d017      	beq.n	8003298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80b4 	beq.w	8003496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a5f      	ldr	r2, [pc, #380]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_GPIO_Init+0x30c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_GPIO_Init+0x310>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_GPIO_Init+0x314>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a51      	ldr	r2, [pc, #324]	; (80034c0 <HAL_GPIO_Init+0x318>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <HAL_GPIO_Init+0x31c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_GPIO_Init+0x320>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x21a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x216>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_GPIO_Init+0x328>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x212>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4c      	ldr	r2, [pc, #304]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x20e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x20a>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e00e      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00c      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033b6:	2306      	movs	r3, #6
 80033b8:	e00a      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ba:	2305      	movs	r3, #5
 80033bc:	e008      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033be:	2304      	movs	r3, #4
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c2:	2303      	movs	r3, #3
 80033c4:	e004      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_GPIO_Init+0x228>
 80033ce:	2300      	movs	r3, #0
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f002 0203 	and.w	r2, r2, #3
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	4093      	lsls	r3, r2
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e0:	4935      	ldr	r1, [pc, #212]	; (80034b8 <HAL_GPIO_Init+0x310>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_GPIO_Init+0x334>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003412:	4a32      	ldr	r2, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_GPIO_Init+0x334>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_GPIO_Init+0x334>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003466:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_GPIO_Init+0x334>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	f67f ae90 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40013800 	.word	0x40013800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020800 	.word	0x40020800
 80034c8:	40020c00 	.word	0x40020c00
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40021400 	.word	0x40021400
 80034d4:	40021800 	.word	0x40021800
 80034d8:	40021c00 	.word	0x40021c00
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e267      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00c      	beq.n	8003524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	2b08      	cmp	r3, #8
 8003514:	d112      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003522:	d10b      	bne.n	800353c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	4b7e      	ldr	r3, [pc, #504]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d05b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x108>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d157      	bne.n	80035e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e242      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x74>
 8003546:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x98>
 800355e:	4b70      	ldr	r3, [pc, #448]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6c      	ldr	r2, [pc, #432]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xb0>
 8003578:	4b69      	ldr	r3, [pc, #420]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a68      	ldr	r2, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b66      	ldr	r3, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fb2c 	bl	8001bf4 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fb28 	bl	8001bf4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e207      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xc0>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fb18 	bl	8001bf4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fb14 	bl	8001bf4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1f3      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	4b51      	ldr	r3, [pc, #324]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0xe8>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f6:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1c7      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e03a      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b34      	ldr	r3, [pc, #208]	; (8003724 <HAL_RCC_OscConfig+0x244>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe facd 	bl	8001bf4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe fac9 	bl	8001bf4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1a8      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4925      	ldr	r1, [pc, #148]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e015      	b.n	80036be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_OscConfig+0x244>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe faac 	bl	8001bf4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fe faa8 	bl	8001bf4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e187      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d036      	beq.n	8003738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x248>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fa8c 	bl	8001bf4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fe fa88 	bl	8001bf4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e167      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x240>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x200>
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x248>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe fa75 	bl	8001bf4 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	e00e      	b.n	800372c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe fa71 	bl	8001bf4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d907      	bls.n	800372c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e150      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003720:	40023800 	.word	0x40023800
 8003724:	42470000 	.word	0x42470000
 8003728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ea      	bne.n	800370e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8097 	beq.w	8003874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b81      	ldr	r3, [pc, #516]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	4b7d      	ldr	r3, [pc, #500]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a7c      	ldr	r2, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b7a      	ldr	r3, [pc, #488]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b77      	ldr	r3, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b74      	ldr	r3, [pc, #464]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe fa31 	bl	8001bf4 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe fa2d 	bl	8001bf4 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e10c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x474>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x2ea>
 80037bc:	4b64      	ldr	r3, [pc, #400]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a63      	ldr	r2, [pc, #396]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x30c>
 80037d2:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x324>
 80037ec:	4b58      	ldr	r3, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a57      	ldr	r2, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	4b55      	ldr	r3, [pc, #340]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a54      	ldr	r2, [pc, #336]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe f9f2 	bl	8001bf4 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe f9ee 	bl	8001bf4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0cb      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ee      	beq.n	8003814 <HAL_RCC_OscConfig+0x334>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fe f9dc 	bl	8001bf4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe f9d8 	bl	8001bf4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0b5      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	4b3e      	ldr	r3, [pc, #248]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	4a38      	ldr	r2, [pc, #224]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a1 	beq.w	80039c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387e:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d05c      	beq.n	8003944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d141      	bne.n	8003916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b31      	ldr	r3, [pc, #196]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f9ac 	bl	8001bf4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe f9a8 	bl	8001bf4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e087      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fe f981 	bl	8001bf4 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe f97d 	bl	8001bf4 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e05c      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x416>
 8003914:	e054      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_RCC_OscConfig+0x478>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe f96a 	bl	8001bf4 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe f966 	bl	8001bf4 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e045      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_OscConfig+0x470>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x444>
 8003942:	e03d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e038      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
 8003958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x4ec>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d028      	beq.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d121      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d11a      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	4293      	cmp	r3, r2
 8003996:	d111      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	3b01      	subs	r3, #1
 80039a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0cc      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d90c      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d044      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e067      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4934      	ldr	r1, [pc, #208]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fe f898 	bl	8001bf4 <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fe f894 	bl	8001bf4 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d20c      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	490a      	ldr	r1, [pc, #40]	; (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	5ccb      	ldrb	r3, [r1, r3]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd fff8 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	080049f0 	.word	0x080049f0
 8003b94:	20000078 	.word	0x20000078
 8003b98:	2000007c 	.word	0x2000007c

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b090      	sub	sp, #64	; 0x40
 8003ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba8:	2300      	movs	r3, #0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	f200 80a1 	bhi.w	8003d08 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d003      	beq.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bce:	e09b      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bd4:	e09b      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd6:	4b53      	ldr	r3, [pc, #332]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bda:	e098      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bdc:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003be6:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c04:	2100      	movs	r1, #0
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c08:	fb03 f201 	mul.w	r2, r3, r1
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	4a43      	ldr	r2, [pc, #268]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c16:	fba0 1202 	umull	r1, r2, r0, r2
 8003c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c22:	4413      	add	r3, r2
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	2200      	movs	r2, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	61fa      	str	r2, [r7, #28]
 8003c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c36:	f7fc fac7 	bl	80001c8 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c42:	e053      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	617a      	str	r2, [r7, #20]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c56:	f04f 0b00 	mov.w	fp, #0
 8003c5a:	4652      	mov	r2, sl
 8003c5c:	465b      	mov	r3, fp
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	ebb2 080a 	subs.w	r8, r2, sl
 8003c76:	eb63 090b 	sbc.w	r9, r3, fp
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c8e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c92:	eb63 0509 	sbc.w	r5, r3, r9
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	00eb      	lsls	r3, r5, #3
 8003ca0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ca4:	00e2      	lsls	r2, r4, #3
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	461d      	mov	r5, r3
 8003caa:	eb14 030a 	adds.w	r3, r4, sl
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	eb45 030b 	adc.w	r3, r5, fp
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	028b      	lsls	r3, r1, #10
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ccc:	4621      	mov	r1, r4
 8003cce:	028a      	lsls	r2, r1, #10
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	60fa      	str	r2, [r7, #12]
 8003cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce0:	f7fc fa72 	bl	80001c8 <__aeabi_uldivmod>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4613      	mov	r3, r2
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3740      	adds	r7, #64	; 0x40
 8003d14:	46bd      	mov	sp, r7
 8003d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	017d7840 	.word	0x017d7840

08003d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000078 	.word	0x20000078

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d44:	f7ff fff0 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0a9b      	lsrs	r3, r3, #10
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08004a00 	.word	0x08004a00

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d6c:	f7ff ffdc 	bl	8003d28 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0b5b      	lsrs	r3, r3, #13
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08004a00 	.word	0x08004a00

08003d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e041      	b.n	8003e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fc fef2 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 f95e 	bl	8004090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e046      	b.n	8003ed6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <HAL_TIM_Base_Start+0xb4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d01d      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <HAL_TIM_Base_Start+0xb8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_TIM_Base_Start+0xbc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_TIM_Base_Start+0xc0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <HAL_TIM_Base_Start+0xc4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_TIM_Base_Start+0xc8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_Base_Start+0x70>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_TIM_Base_Start+0xcc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d010      	beq.n	8003ed4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40010400 	.word	0x40010400
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40001800 	.word	0x40001800

08003f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x1c>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0b4      	b.n	8004086 <HAL_TIM_ConfigClockSource+0x186>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d03e      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5a:	f200 8087 	bhi.w	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f62:	f000 8086 	beq.w	8004072 <HAL_TIM_ConfigClockSource+0x172>
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d87f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b70      	cmp	r3, #112	; 0x70
 8003f6e:	d01a      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d87b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b60      	cmp	r3, #96	; 0x60
 8003f76:	d050      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x11a>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d877      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7c:	2b50      	cmp	r3, #80	; 0x50
 8003f7e:	d03c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xfa>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d873      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d058      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x13a>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d86f      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b30      	cmp	r3, #48	; 0x30
 8003f8e:	d064      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d86b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d060      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d867      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d05a      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	e062      	b.n	800406c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6899      	ldr	r1, [r3, #8]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f000 f985 	bl	80042c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	609a      	str	r2, [r3, #8]
      break;
 8003fd2:	e04f      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6899      	ldr	r1, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f000 f96e 	bl	80042c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff6:	609a      	str	r2, [r3, #8]
      break;
 8003ff8:	e03c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	461a      	mov	r2, r3
 8004008:	f000 f8e2 	bl	80041d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2150      	movs	r1, #80	; 0x50
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f93b 	bl	800428e <TIM_ITRx_SetConfig>
      break;
 8004018:	e02c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 f901 	bl	800422e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2160      	movs	r1, #96	; 0x60
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f92b 	bl	800428e <TIM_ITRx_SetConfig>
      break;
 8004038:	e01c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 f8c2 	bl	80041d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f91b 	bl	800428e <TIM_ITRx_SetConfig>
      break;
 8004058:	e00c      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f000 f912 	bl	800428e <TIM_ITRx_SetConfig>
      break;
 800406a:	e003      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      break;
 8004070:	e000      	b.n	8004074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ae:	d00f      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3c      	ldr	r2, [pc, #240]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a3b      	ldr	r2, [pc, #236]	; (80041b0 <TIM_Base_SetConfig+0x120>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3a      	ldr	r2, [pc, #232]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d02b      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d027      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_Base_SetConfig+0x118>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d023      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_Base_SetConfig+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01f      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <TIM_Base_SetConfig+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01b      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d017      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a28      	ldr	r2, [pc, #160]	; (80041b8 <TIM_Base_SetConfig+0x128>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a27      	ldr	r2, [pc, #156]	; (80041bc <TIM_Base_SetConfig+0x12c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00f      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <TIM_Base_SetConfig+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00b      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <TIM_Base_SetConfig+0x134>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <TIM_Base_SetConfig+0x138>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a23      	ldr	r2, [pc, #140]	; (80041cc <TIM_Base_SetConfig+0x13c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d108      	bne.n	8004154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <TIM_Base_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0xf8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <TIM_Base_SetConfig+0x124>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d103      	bne.n	8004190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	615a      	str	r2, [r3, #20]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40010400 	.word	0x40010400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800
 80041c4:	40001800 	.word	0x40001800
 80041c8:	40001c00 	.word	0x40001c00
 80041cc:	40002000 	.word	0x40002000

080041d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 030a 	bic.w	r3, r3, #10
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0210 	bic.w	r2, r3, #16
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800426a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f043 0307 	orr.w	r3, r3, #7
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004318:	2302      	movs	r3, #2
 800431a:	e05a      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d01d      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40001800 	.word	0x40001800

080043fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e03f      	b.n	800448e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fbdc 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	; 0x24
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f829 	bl	8004498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b0c0      	sub	sp, #256	; 0x100
 800449e:	af00      	add	r7, sp, #0
 80044a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	68d9      	ldr	r1, [r3, #12]
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	ea40 0301 	orr.w	r3, r0, r1
 80044c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044f0:	f021 010c 	bic.w	r1, r1, #12
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044fe:	430b      	orrs	r3, r1
 8004500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	6999      	ldr	r1, [r3, #24]
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	ea40 0301 	orr.w	r3, r0, r1
 800451e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b8f      	ldr	r3, [pc, #572]	; (8004764 <UART_SetConfig+0x2cc>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d005      	beq.n	8004538 <UART_SetConfig+0xa0>
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <UART_SetConfig+0x2d0>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7ff fc16 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 800453c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004540:	e003      	b.n	800454a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004542:	f7ff fbfd 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8004546:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004554:	f040 810c 	bne.w	8004770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004562:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	1891      	adds	r1, r2, r2
 8004570:	65b9      	str	r1, [r7, #88]	; 0x58
 8004572:	415b      	adcs	r3, r3
 8004574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800457a:	4621      	mov	r1, r4
 800457c:	eb12 0801 	adds.w	r8, r2, r1
 8004580:	4629      	mov	r1, r5
 8004582:	eb43 0901 	adc.w	r9, r3, r1
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459a:	4690      	mov	r8, r2
 800459c:	4699      	mov	r9, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	eb18 0303 	adds.w	r3, r8, r3
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045a8:	462b      	mov	r3, r5
 80045aa:	eb49 0303 	adc.w	r3, r9, r3
 80045ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045c6:	460b      	mov	r3, r1
 80045c8:	18db      	adds	r3, r3, r3
 80045ca:	653b      	str	r3, [r7, #80]	; 0x50
 80045cc:	4613      	mov	r3, r2
 80045ce:	eb42 0303 	adc.w	r3, r2, r3
 80045d2:	657b      	str	r3, [r7, #84]	; 0x54
 80045d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045dc:	f7fb fdf4 	bl	80001c8 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <UART_SetConfig+0x2d4>)
 80045e6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	011c      	lsls	r4, r3, #4
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	64b9      	str	r1, [r7, #72]	; 0x48
 8004608:	415b      	adcs	r3, r3
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004610:	4641      	mov	r1, r8
 8004612:	eb12 0a01 	adds.w	sl, r2, r1
 8004616:	4649      	mov	r1, r9
 8004618:	eb43 0b01 	adc.w	fp, r3, r1
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800462c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004630:	4692      	mov	sl, r2
 8004632:	469b      	mov	fp, r3
 8004634:	4643      	mov	r3, r8
 8004636:	eb1a 0303 	adds.w	r3, sl, r3
 800463a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463e:	464b      	mov	r3, r9
 8004640:	eb4b 0303 	adc.w	r3, fp, r3
 8004644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004654:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800465c:	460b      	mov	r3, r1
 800465e:	18db      	adds	r3, r3, r3
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
 8004662:	4613      	mov	r3, r2
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
 800466a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800466e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004672:	f7fb fda9 	bl	80001c8 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4611      	mov	r1, r2
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <UART_SetConfig+0x2d4>)
 800467e:	fba3 2301 	umull	r2, r3, r3, r1
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2264      	movs	r2, #100	; 0x64
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	1acb      	subs	r3, r1, r3
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <UART_SetConfig+0x2d4>)
 8004694:	fba3 2302 	umull	r2, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a0:	441c      	add	r4, r3
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80046bc:	415b      	adcs	r3, r3
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6339      	str	r1, [r7, #48]	; 0x30
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f8:	464b      	mov	r3, r9
 80046fa:	460a      	mov	r2, r1
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004710:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004718:	460b      	mov	r3, r1
 800471a:	18db      	adds	r3, r3, r3
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	4613      	mov	r3, r2
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800472a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800472e:	f7fb fd4b 	bl	80001c8 <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <UART_SetConfig+0x2d4>)
 8004738:	fba3 1302 	umull	r1, r3, r3, r2
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	2164      	movs	r1, #100	; 0x64
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	3332      	adds	r3, #50	; 0x32
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <UART_SetConfig+0x2d4>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	f003 0207 	and.w	r2, r3, #7
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4422      	add	r2, r4
 800475e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004760:	e106      	b.n	8004970 <UART_SetConfig+0x4d8>
 8004762:	bf00      	nop
 8004764:	40011000 	.word	0x40011000
 8004768:	40011400 	.word	0x40011400
 800476c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004774:	2200      	movs	r2, #0
 8004776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800477a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800477e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004782:	4642      	mov	r2, r8
 8004784:	464b      	mov	r3, r9
 8004786:	1891      	adds	r1, r2, r2
 8004788:	6239      	str	r1, [r7, #32]
 800478a:	415b      	adcs	r3, r3
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
 800478e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004792:	4641      	mov	r1, r8
 8004794:	1854      	adds	r4, r2, r1
 8004796:	4649      	mov	r1, r9
 8004798:	eb43 0501 	adc.w	r5, r3, r1
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	00eb      	lsls	r3, r5, #3
 80047a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047aa:	00e2      	lsls	r2, r4, #3
 80047ac:	4614      	mov	r4, r2
 80047ae:	461d      	mov	r5, r3
 80047b0:	4643      	mov	r3, r8
 80047b2:	18e3      	adds	r3, r4, r3
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047b8:	464b      	mov	r3, r9
 80047ba:	eb45 0303 	adc.w	r3, r5, r3
 80047be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047de:	4629      	mov	r1, r5
 80047e0:	008b      	lsls	r3, r1, #2
 80047e2:	4621      	mov	r1, r4
 80047e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e8:	4621      	mov	r1, r4
 80047ea:	008a      	lsls	r2, r1, #2
 80047ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047f0:	f7fb fcea 	bl	80001c8 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b60      	ldr	r3, [pc, #384]	; (800497c <UART_SetConfig+0x4e4>)
 80047fa:	fba3 2302 	umull	r2, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	011c      	lsls	r4, r3, #4
 8004802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800480c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004814:	4642      	mov	r2, r8
 8004816:	464b      	mov	r3, r9
 8004818:	1891      	adds	r1, r2, r2
 800481a:	61b9      	str	r1, [r7, #24]
 800481c:	415b      	adcs	r3, r3
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004824:	4641      	mov	r1, r8
 8004826:	1851      	adds	r1, r2, r1
 8004828:	6139      	str	r1, [r7, #16]
 800482a:	4649      	mov	r1, r9
 800482c:	414b      	adcs	r3, r1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800483c:	4659      	mov	r1, fp
 800483e:	00cb      	lsls	r3, r1, #3
 8004840:	4651      	mov	r1, sl
 8004842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004846:	4651      	mov	r1, sl
 8004848:	00ca      	lsls	r2, r1, #3
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	4603      	mov	r3, r0
 8004850:	4642      	mov	r2, r8
 8004852:	189b      	adds	r3, r3, r2
 8004854:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004858:	464b      	mov	r3, r9
 800485a:	460a      	mov	r2, r1
 800485c:	eb42 0303 	adc.w	r3, r2, r3
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	67bb      	str	r3, [r7, #120]	; 0x78
 800486e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800487c:	4649      	mov	r1, r9
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	4641      	mov	r1, r8
 8004882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004886:	4641      	mov	r1, r8
 8004888:	008a      	lsls	r2, r1, #2
 800488a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800488e:	f7fb fc9b 	bl	80001c8 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4611      	mov	r1, r2
 8004898:	4b38      	ldr	r3, [pc, #224]	; (800497c <UART_SetConfig+0x4e4>)
 800489a:	fba3 2301 	umull	r2, r3, r3, r1
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	2264      	movs	r2, #100	; 0x64
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	1acb      	subs	r3, r1, r3
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	3332      	adds	r3, #50	; 0x32
 80048ac:	4a33      	ldr	r2, [pc, #204]	; (800497c <UART_SetConfig+0x4e4>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b8:	441c      	add	r4, r3
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	673b      	str	r3, [r7, #112]	; 0x70
 80048c2:	677a      	str	r2, [r7, #116]	; 0x74
 80048c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	1891      	adds	r1, r2, r2
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	415b      	adcs	r3, r3
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d8:	4641      	mov	r1, r8
 80048da:	1851      	adds	r1, r2, r1
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	4649      	mov	r1, r9
 80048e0:	414b      	adcs	r3, r1
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048f0:	4659      	mov	r1, fp
 80048f2:	00cb      	lsls	r3, r1, #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fa:	4651      	mov	r1, sl
 80048fc:	00ca      	lsls	r2, r1, #3
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	4603      	mov	r3, r0
 8004904:	4642      	mov	r2, r8
 8004906:	189b      	adds	r3, r3, r2
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
 800490a:	464b      	mov	r3, r9
 800490c:	460a      	mov	r2, r1
 800490e:	eb42 0303 	adc.w	r3, r2, r3
 8004912:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	663b      	str	r3, [r7, #96]	; 0x60
 800491e:	667a      	str	r2, [r7, #100]	; 0x64
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800492c:	4649      	mov	r1, r9
 800492e:	008b      	lsls	r3, r1, #2
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004936:	4641      	mov	r1, r8
 8004938:	008a      	lsls	r2, r1, #2
 800493a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800493e:	f7fb fc43 	bl	80001c8 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <UART_SetConfig+0x4e4>)
 8004948:	fba3 1302 	umull	r1, r3, r3, r2
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	3332      	adds	r3, #50	; 0x32
 800495a:	4a08      	ldr	r2, [pc, #32]	; (800497c <UART_SetConfig+0x4e4>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4422      	add	r2, r4
 800496e:	609a      	str	r2, [r3, #8]
}
 8004970:	bf00      	nop
 8004972:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004976:	46bd      	mov	sp, r7
 8004978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800497c:	51eb851f 	.word	0x51eb851f

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f818 	bl	80049d8 <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a18 	.word	0x08004a18
 80049cc:	08004a18 	.word	0x08004a18
 80049d0:	08004a18 	.word	0x08004a18
 80049d4:	08004a1c 	.word	0x08004a1c

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
